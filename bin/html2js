#!/usr/bin/env node

'use strict';

var fs = require( 'fs' );
var html2js = require('../src/html2js.js');

var help = function () {
    var message = [
        'html2js: mautomatic transfer html to mode js file',
        '',
        'Usage',
        '    html2js [options]',
        '',
        'Config',
        [
            '--charset value  Output file charset, "utf-8" by default',
            '   --type value  Connect string type, "as" by default',
            '                 Array or Plus connect, Double or Single quotation',
            '      --version  Print the html2js version',
            '         --help  Display this help text'
        ].join('\n')
    ].join( '\n' );

    process.stdout.write( message + '\n' );
};

var args = process.argv.slice( 2 );

var config = {
    basePath: './',
    output: './output',
    charset: 'utf-8',
    type: 'as',
    version: '0.0.1'
};

//参数1表示需要转化的模板目录
if ( args[ 0 ] && /^[^-]|\//.test( args[ 0 ] ) ) {
    config.basePath = args.shift();
}

//参数2表示转化后输出目录
if ( args[ 0 ] && /^[^-]|\//.test( args[ 0 ] ) ) {
    config.output = args.shift();
}

while( args.length > 0 ) {
    switch( args.shift() ) {

        // 模板输出类型
        case '-t':
        case '--type':
            config.type = args.shift();
            break;

        // 模板编码
        case '-c':
        case '--charset':
            config.charset = args.shift();
            break;

        // 显示帮助
        case '-h':
        case '--help':
            help();
            process.exit();
            break;

        // 版本号
        case '-v':
        case '--version':
            process.stdout.write( config.version + '\n' );
            process.exit();
            break;
    }
}

if ( !fs.existsSync( config.basePath ) ) {
    process.stdout.write( 'Error: directory does not exist\n' );
    process.exit( 1 );
}

new html2js( config );
